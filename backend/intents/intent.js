/**
 * This file is used to manage proper response to matched intent.
 * The main concept is at 'intents' object. It has functions that 
 * receives WebhookClient (as 'agent') and used it to response messages.
 */

const { name: projectId } = require('../package.json');

const moment = require('moment-timezone');
moment.tz.setDefault('Asia/Bangkok');
moment.locale('th');

const Firestore = require('@google-cloud/firestore');
const db = new Firestore({
  projectId,
});

const { RichResponse, Payload, Image } = require('dialogflow-fulfillment');

const OTP = require('../models/otp.js');
const Menses = require('../models/menses');
const User = require('../models/user');
const Message = require('../models/message');

const wrapper = f => ( (...agent) => ( async () => f(...agent) ) );
const line = str => str.split('\n').map(e => e.trimStart()).join('\n');
const clearOutgoingContexts = agent => {
  for (const context of agent.context) {
    agent.context.delete(context.name)
  }
}

const intents = module.exports =  {
  welcome: agent => agent.add('welcome jaa'), // This line indicate that with 'welcome' intents, we send a response message as that text.

  fallback: agent => agent.add('i dont know this word'),

  birthdate: async (agent, userId) => {
    let bd = moment(agent.parameters.birthdate);
    if (bd.isAfter(moment())) bd = bd.subtract(43, 'y');
    agent.context.set('age', 3, { birthdate: bd });
    agent.context.set('confirmage-followup', 3);

    let response = new Payload('LINE', Message.confirmBirthdate(bd), {
      sendAsMessage: true,
      rawPayload: false,
    });
    agent.add(response);
  },

  'confirm age - yes': async (agent, userId) => {
    let bd;
    agent.contexts.forEach(e => {
      if (e.name == 'age') bd = e.parameters.birthdate;
    });
    await db.collection('Users').doc(userId).set({
      birthdate: bd
    });
    agent.add('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    clearOutgoingContexts(agent);
  },

  'confirm age - no': async (agent, userId) => {
    agent.add('‡πÇ‡∏õ‡∏£‡∏î‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÉ‡∏´‡∏°‡πà‡∏Ñ‡πà‡∏∞');
    clearOutgoingContexts(agent);
  },

  name: async (agent, userId) => {
    let name;
    agent.contexts.forEach(e => {
      if (e.name == 'name-followup') name = e.parameters.name;
    });
    await db.collection('Users').doc(userId).set({
      name: name
    });
    agent.add('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    clearOutgoingContexts(agent);
  },

  askMenses: async (agent, userId) => {
    let today = moment();
    let response = new Payload('LINE', Message.askMenses(today), {
      sendAsMessage: true,
      rawPayload: false,
    });
    agent.add(response);
  },

  menses: async (agent, userId) => {
    let date, grade;
    if (agent.parameters['date']) date = agent.parameters['date'];
    if (!agent.parameters['quality']) throw new Error('quality not found');

    const map = {
      no: 0,
      light: 1,
      normal: 2,
      heavy: 3,
      spot: 'spot',
    }
    grade = map[agent.parameters['quality']];
    date = moment(date).set({ hour: 0, minute: 0, second: 0, millisecond: 0 });
    if (date.isAfter(moment())) {
      agent.add('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î (date input is future)');
      clearOutgoingContexts(agent);
      return ;
    }

    let oldMenses = await db.collection('Users').doc(userId).collection('Menses').where('date', '=', date.toDate()).get();
    let newMenses;
    if (!oldMenses.empty) newMenses = new Menses(oldMenses.docs[0].ref, grade, date);
    else newMenses = new Menses(db.collection('Users').doc(userId).collection('Menses').doc(), grade, date);
    await newMenses.save();
    agent.add(`${date.format('‡∏ß‡∏±‡∏ôdddd‡∏ó‡∏µ‡πà D MMMM')} ‡∏Ñ‡∏∏‡∏ì${!grade ? '‡πÑ‡∏°‡πà' : ''}‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô${grade ? `‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì${Menses.map[grade]}` : ''} ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
    clearOutgoingContexts(agent);
    let askPainImage = new Image(Message.askPainImage());
    let askPain = new Payload('LINE', Message.askPain(date), {
      sendAsMessage: true,
      rawPayload: false,
    });
    agent.context.set('pain', 3, {
      date: date
    });
    agent.add(askPainImage);
    agent.add(askPain);
  },

  pain: async (agent, userId) => {
    // console.log(agent.contexts);
    let date = agent.context.get('pain').parameters['date'];
    date = moment(date).set({ hour: 0, minute: 0, second: 0, millisecond: 0 });

    let menses = await db.collection('Users').doc(userId).collection('Menses').where('date', '=', date.toDate()).get();
    if (menses.empty) throw new Error('no menses data');
    await menses.docs[0].ref.update({
      pain: agent.parameters['pain-score']
    });

    agent.context.set('drug', 3, {
      date: date
    });
    let askDrug = new Payload('LINE', Message.askDrug(), {
      sendAsMessage: true,
      rawPayload: false,
    });
    agent.context.set('drug', 3, {
      date: date
    });
    agent.add(`${date.format('‡∏ß‡∏±‡∏ôdddd‡∏ó‡∏µ‡πà D MMMM')} ‡∏Ñ‡∏∏‡∏ì‡∏õ‡∏ß‡∏î‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö ${agent.parameters['pain-score']} ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
    agent.add(askDrug);
  },

  drug: async (agent, userId) => {
    // console.log(agent.contexts);
    let date = agent.context.get('drug').parameters['date'];
    date = moment(date).set({ hour: 0, minute: 0, second: 0, millisecond: 0 });

    let menses = await db.collection('Users').doc(userId).collection('Menses').where('date', '=', date.toDate()).get();
    if (menses.empty) throw new Error('no menses data');
    await menses.docs[0].ref.update({
      drug: agent.parameters['Y-N'] == 'yes'
    });

    let askDrug = new Payload('LINE', Message.askDrug(), {
      sendAsMessage: true,
      rawPayload: false,
    });
    agent.add(`${date.format('‡∏ß‡∏±‡∏ôdddd‡∏ó‡∏µ‡πà D MMMM')} ‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≤‡∏ô/‡πÉ‡∏ä‡πâ‡∏¢‡∏≤${agent.parameters['Y-N'] == 'yes' ? '‡∏Ñ‡∏£‡∏ö' : '‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö'}‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
    agent.add('‡∏ü‡πâ‡∏≤‡∏Ç‡∏≠‡∏ï‡∏±‡∏ß‡πÑ‡∏õ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡πà‡∏∞ üôá‚Äç‚ôÄÔ∏è');
  },
  
  profile: async (agent, userId) => {
    let user = await db.collection('Users').doc(userId).get();
    agent.add(line(
      `‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
      ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î - ${moment(user.get('birthdate')).format('‡∏ß‡∏±‡∏ôdddd‡∏ó‡∏µ‡πà D MMMM YYYY')}
      ‡∏≠‡∏≤‡∏¢‡∏∏ - ${moment(user.get('birthdate')).diff(moment(), 'years')}
      (... ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏≤‡∏°‡∏°‡∏≤)`));
  },

  otp: async (agent, userId) => {
    let otp = await OTP.createToken(db.collection('Users').doc(userId));
    agent.add(
`‚ö†Ô∏è ‡πÇ‡∏õ‡∏£‡∏î‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏ï‡∏Å‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏•‡∏¥‡πâ‡∏á‡∏Ñ‡πå‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏Å‡πà‡πÅ‡∏û‡∏ó‡∏¢‡πå ‚ö†Ô∏è
https://signb-project.appspot.com/visualize/terms
*‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∑‡∏≠*
${otp}`);
    clearOutgoingContexts(agent);
    return otp;
  },

  'edit - birthdate': async (agent, userId) => {
    agent.setFollowupEvent('birthdate');
    agent.add('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ‡∏ß‡∏±‡∏ô/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/‡∏õ‡∏µ‡πÄ‡∏Å‡∏¥‡∏î ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà‡∏Ñ‡∏∞');
  },

  /* editMenses: async (agent, userId, grade) => {
    let date;
    agent.contexts.forEach(e => {
      if (e.name == 'edit-menstruation-date-followup') date = e.parameters['date-time'];
    });
    date = moment(date).set({ hour: 0, minute: 0, second: 0, millisecond: 0 });
    let oldMenses = await db.collection('Users').doc(userId).collection('Menses').where('date', '=', date.toDate()).get();
    let newMenses
    if (!oldMenses.empty) newMenses = new Menses(oldMenses.docs[0].ref, grade, date);
    else newMenses = new Menses(db.collection('Users').doc(userId).collection('Menses').doc(), grade, date);
    await newMenses.save();
    agent.add(`${date.format('‡∏ß‡∏±‡∏ôdddd‡∏ó‡∏µ‡πà D MMMM')} ‡∏Ñ‡∏∏‡∏ì${!grade ? '‡πÑ‡∏°‡πà' : ''}‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô${grade ? `‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì${Menses.map[grade]}` : ''}‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡∏Ñ‡πà‡∏∞`);
    clearOutgoingContexts(agent);
  }, */

  editMenses: async (agent, userId, grade) => {
    let date = agent.context.get('edit-menstruation-date-followup').parameters['date'];
    date = moment(date).set({ hour: 0, minute: 0, second: 0, millisecond: 0 });
    let response = new Payload('LINE', Message.askMenses(date), {
      sendAsMessage: true,
      rawPayload: false,
    });
    agent.add(response);
  },

  notification: async (agent, userId, noti) => {
    let user = new User(db.collection('Users').doc(userId));
    // agent.add(await user.getNotification());
    await user.setNotification(noti);
    agent.add(`${User.mapNoti[noti]}‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡∏Ñ‡πà‡∏∞`);
    clearOutgoingContexts(agent);
  }
};
 
for (let k in intents) {
  intents[k] = wrapper(intents[k]);
}